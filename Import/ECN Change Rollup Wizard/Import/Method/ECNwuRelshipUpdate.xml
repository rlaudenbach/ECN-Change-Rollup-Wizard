<AML>
 <Item type="Method" id="325D11636C7F4A7687001E6EEC22CF6C" action="add">
  <execution_allowed_to keyed_name="World" type="Identity">A73B655731924CD0B027E4F4D5FCC0A9</execution_allowed_to>
  <method_code><![CDATA[// context item:  "ECN WhereUsed Impact"
// called by event: onBeforeUpdate

//System.Diagnostics.Debugger.Launch();System.Diagnostics.Debugger.Break();

Item ECNItem = this.getInnovator().getItemById ("ECN", this.getProperty("source_id","invalid"));


bool allowWherUsedImpact = false;
// ecn states for which where used impact can be run
switch (ECNItem.getProperty("state","")){
    case "New":
    case "In Planning":
        allowWherUsedImpact = true;    
        break;
}

if (ECNItem.getProperty("where_used_impact_enabled","0") == "0" || !allowWherUsedImpact) {
    return this.getInnovator().newError("Where Used Impact is only allowed, if enabled and when in state 'New' or 'Planning' !");  //##TODO## add I18N support
}

// read row values
string afectedItemId = this.getProperty("affected_id","");
string ffItemId = this.getProperty("fff_interchangeable_id","");
string ffItemNum = this.getProperty("fff_interchangeable_item_num","");
string wuPathIds = this.getProperty("where_used_path_ids","");
string wuPathNumbers = this.getProperty("where_used_path_numbers","");
string ignorePath = this.getProperty("ignore_wu_path","0");

// validate some settings
if (ffItemNum == "" && ignorePath == "0") {
    this.setProperty("ignore_wu_path","1");
    return this;
}
if (ffItemNum == "") {return this;}  // nothing to do 

if (ffItemNum != "" && ignorePath == "1") {
    this.setProperty("ignore_wu_path","0");
}

if (wuPathNumbers == "") {
    return this.getInnovator().newError("Path is not set !"); //## TODO ## I18N
}

string[] wuPathNumbers_a = wuPathNumbers.Split('/');
string[] wuPathIds_a = wuPathIds.Split('/');

if (wuPathNumbers.IndexOf("/"+ffItemNum) < 0) {
    return this.getInnovator().newError("FFF item is not listed on Path of the same row !"); //## TODO ## I18N
}

if (ffItemId == "") {
    // try to find id in path
    for (int i= 1; i<wuPathNumbers_a.Length && ffItemId == ""; i++) {
        string wuPathElement = wuPathNumbers_a[i];
    
        if (wuPathElement == ffItemNum) {
            ffItemId = wuPathIds_a[i];
        }
    }
    if (ffItemId == "") {
        return this.getInnovator().newError("Id of FFF item is not set !"); //## TODO ## I18N
    }
    this.setProperty("fff_interchangeable_id",ffItemId);
}

// scan path up to fffItem number
bool found = false;
string affectedItemsToAdd = "";
for (int i=1; i<wuPathNumbers_a.Length && !found; i++) {
    string wuPathElement = wuPathNumbers_a[i];
    
    if (wuPathElement == ffItemNum) {
        found = true;    
    }
    else {
       affectedItemsToAdd += ","+wuPathIds_a[i];
    }
}

Item affectedItemRels = ECNItem.getRelationships("ECN Affected Item");
if (affectedItemRels.getItemCount() <= 0) {
    ECNItem.fetchRelationships("ECN Affected Item");
    affectedItemRels = ECNItem.getRelationships("ECN Affected Item");
}

MergeToECNaffectedItems (ECNItem, affectedItemsToAdd);

// save ECN with new Affected Items
Aras.Server.Security.Identity identity = Aras.Server.Security.Identity.GetByName("Super User"); //Get super user identity
bool permsWasSet = Aras.Server.Security.Permissions.GrantIdentity(identity);
ECNItem.setAttribute("serverEvents","0");
ECNItem = ECNItem.apply();
if (permsWasSet) {Aras.Server.Security.Permissions.RevokeIdentity(identity);}
if (ECNItem.isError()) {return ECNItem;}

return this;
}

// ----
private void MergeToECNaffectedItems (Item ecnItem, string affectedItemsToAdd) {
    
    Item affectedItemRels = ecnItem.getRelationships("ECN Affected Item");
    Item affectedItemRel = null;
    Item affectedItem = null;
    
    string[]affectedItemsToAdd_a = affectedItemsToAdd.Split(',');
    
    for (int a= 1; a<affectedItemsToAdd_a.Length; a++) {
        string newAffectedItemId = affectedItemsToAdd_a[a];
        
        bool aiExists = false;
        for (int i= 0; i<affectedItemRels.getItemCount() && !aiExists; i++) {
            affectedItemRel = affectedItemRels.getItemByIndex(i);
            affectedItem = affectedItemRel.getRelatedItem();
            
            string affectedItemId = affectedItem.getProperty("affected_id","");
            if (affectedItemId == newAffectedItemId) {
                aiExists = true;
            }
        }
        
        // is affected item listed already ?
        if (aiExists) {
            affectedItem.setAction("edit");
            affectedItem.setProperty("affected_how","Impacted");
        }
        else {
            affectedItemRel = ecnItem.createRelationship("ECN Affected Item", "add");
            affectedItem = affectedItemRel.createRelatedItem("Affected Item","add");
            affectedItem.setProperty("affected_how","Impacted");
            affectedItem.setProperty("action","Change");
            affectedItem.setProperty("item_action","Revise");
            affectedItem.setProperty("interchangeable","1");
            affectedItem.setProperty("affected_id",newAffectedItemId);
        }
    }
}

// ----
private void EoM () {
]]></method_code>
  <method_type>C#</method_type>
  <name>ECNwuRelshipWizzardLogic</name>
 </Item>
</AML>